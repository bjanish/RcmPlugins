<?php

if ($this->testType == 'default') {

    $this->rcmIncludeTinyMceJs();

    ?>

    TEST RcmTinyMce
    <script type="text/javascript">
        baseUrl = "<?php echo $baseUrl; ?>";

        //tn1 = new tinymce();
        /* */
        tinymce.init({
            force_br_newlines: false,
            force_p_newlines: false,
            forced_root_block: '',

            inline: true,
            fixed_toolbar_container: '#externalToolbarWrapper',

            menubar: false,
            plugins: "anchor, charmap, code, hr, image, link, paste, spellchecker, template, table",
            relative_urls: true,
            document_base_url: baseUrl,
            statusbar: false,
            selector: "[data-richEdit],[data-textEdit]", //"div.editor",

            setup: function (theEditor) {
                /* hide/show toolbar on focus div.mce-toolbar-grp *
                 theEditor.on('focus', function () {
                 $('#externalToolbarWrapper').find("div.mce-panel").show();
                 });
                 theEditor.on('blur', function () {
                 $('#externalToolbarWrapper').find("div.mce-panel").show();
                 });
                 theEditor.on("init", function() {
                 $('#externalToolbarWrapper').find("div.mce-panel").show();
                 });
                 //*/
            },

            toolbar: [
                "code | undo redo | spellchecker | styleselect | " +
                    "bold italic underline strikethrough subscript superscript removeformat | " +
                    "alignleft aligncenter alignright alignjustify | " +
                    "bullist numlist outdent indent | cut copy paste pastetext | " +
                    "image table hr charmap template | link unlink anchor"
            ]
        });
        //*/

        testDefaultOutput = function (elm) {

            document.getElementById('defaultOutput').innerText = elm.innerHTML;
        };
    </script>
    <div>
        <div id="externalToolbarWrapper" class="mce-tinymce-inline">TOOLBAR</div>
        <br/>

        <div>Model Value: "<span id="defaultOutput"></span>"</div>
        <br/>

        <form method="post">
            <label for="textarea1">GENERAL USAGE</label>
            <br/>

            <div class="editor">CLASS</div>
            <br/>

            <div data-richEdit="something" onblur="testDefaultOutput(this)">richEdit</div>
            <br/>

            <div data-richEdit="somethingElse" onblur="testDefaultOutput(this)">richEdit2</div>
            <br/>

            <div data-textEdit="somethingText" onblur="testDefaultOutput(this)">textEdit</div>
            <br/>
            <label data-richEdit="something" onblur="testDefaultOutput(this)">richEdit label</label>
            <br/>
            <button disabled="disabled" onclick="return false;">
                <div data-richEdit="something">richEdit button</div>
            </button>
        </form>
    </div>

<?php

} else {

    /* From RcmAngularJs Module */
    $this->rcmIncludeAngularJsUiTinyMce();

    ?>

    TEST RcmTinyMce
    <script type="text/javascript">
        // angular
        var myAppModule = angular.module('MyApp', ['ui.tinymce']);
        myAppModule.controller('MyController', function ($scope) {
            $scope.tinymceOptions = {
                force_br_newlines: false,
                force_p_newlines: false,
                forced_root_block: '',
                handle_event_callback: function (e) {
                    // put logic here for keypress
                }
            };

            $scope.myModel = "My Text"
        });

        angular.module('Rcm', ['ui.tinymce'])
            .factory(
            'rcmConfig',
            function () {
                self = this;

                self.baseUrl = "<?php echo $baseUrl; ?>";


                return self;
            }
        )
        .factory(
            'htmlEditorDefaultOptions',
            [
                'rcmConfig',
                function (rcmConfig) {
                    var tinymceOptions = {
                        force_br_newlines: false,
                        force_p_newlines: false,
                        forced_root_block: '',

                        inline: true,
                        fixed_toolbar_container: '#externalToolbarWrapper',

                        menubar: false,
                        plugins: "anchor, charmap, code, hr, image, link, paste, spellchecker, template, table",
                        relative_urls: true,
                        document_base_url: rcmConfig.baseUrl,
                        statusbar: false,
                        selector: "[data-richEdit],[data-textEdit]", //"div.editor",

                        setup: function (theEditor) {
                            /* hide/show toolbar on focus div.mce-toolbar-grp *
                             theEditor.on('focus', function () {
                             $('#externalToolbarWrapper').find("div.mce-panel").show();
                             });
                             theEditor.on('blur', function () {
                             $('#externalToolbarWrapper').find("div.mce-panel").show();
                             });
                             theEditor.on("init", function() {
                             $('#externalToolbarWrapper').find("div.mce-panel").show();
                             });
                             //*/
                        },

                        toolbar: [
                            "code | undo redo | spellchecker | styleselect | " +
                                "bold italic underline strikethrough subscript superscript removeformat | " +
                                "alignleft aligncenter alignright alignjustify | " +
                                "bullist numlist outdent indent | cut copy paste pastetext | " +
                                "image table hr charmap template | link unlink anchor"
                        ]
                    };

                    return tinymceOptions;
                }
            ]
        )
        .factory(
            'rcmHtmlEdit',
            [
                'htmlEditorDefaultOptions',
                function (htmlEditorDefaultOptions) {

                    return function () {

                        var thislink = function (scope, element, attrs) {

                            var self = this;

                            scope.closeAlert = function (index) {
                                scope.rcmResults.clear();
                            };

                            console.log(attrs);
                            if (!attrs.uiTinymce) {
                                attrs.$set('uiTinymce', htmlEditorDefaultOptions);
                            }

                        }

                        return {
                            //priority: 10,
                            //require: 'ngModel',
                            link: thislink,
                            template: 'MEEEEEEEE'
                        }
                    }
                }
            ]
        )
        .controller(
            'rcmController',
            [
                '$scope',
                'htmlEditorDefaultOptions',
                function ($scope, htmlEditorDefaultOptions) {

                    $scope.tinymceOptions = htmlEditorDefaultOptions;

                    $scope.myModel = "My Text"
                }
            ]
        )
        .directive(
            'richedit',
            [
                'rcmHtmlEdit',
                function (rcmHtmlEdit) {

                    return rcmHtmlEdit();
                }
            ]
        );
    </script>
    <div ng-app="Rcm">
        <form method="post" ng-controller="rcmController">
            <div>Model Value: "{{myModel}}"</div>
            <br/>

            <div rich-edit="" class="editor">CLASS</div>
            <br/>

            <div data-richEdit="something" ng-model="myModel">richEdit</div>
            <br/>

            <div data-richEdit="somethingElse" ng-model="myModel">richEdit2
            </div>
            <br/>

            <div data-textEdit="somethingText" ng-model="myModel">textEdit</div>
            <br/>
            <label data-richEdit="something" ng-model="myModel">richEdit label</label>
            <br/>
            <button disabled="disabled" onclick="return false;">
                <div data-richEdit="something" ng-model="myModel">richEdit button</div>
            </button>
        </form>
    </div>

<?php
}
?>



