<?php

if ($this->testType == 'default') {

    $this->rcmIncludeTinyMceJs();

    ?>

    TEST RcmTinyMce
    <script type="text/javascript">
        baseUrl = "<?php echo $baseUrl; ?>";

        //tn1 = new tinymce();
        /* */
        tinymce.init({
            force_br_newlines: false,
            force_p_newlines: false,
            forced_root_block: '',

            inline: true,
            fixed_toolbar_container: '#externalToolbarWrapper',

            menubar: false,
            plugins: "anchor, charmap, code, hr, image, link, paste, spellchecker, template, table",
            relative_urls: true,
            document_base_url: baseUrl,
            statusbar: false,
            selector: "[data-richEdit],[data-textEdit]", //"div.editor",

            setup: function (theEditor) {
                /* hide/show toolbar on focus div.mce-toolbar-grp *
                 theEditor.on('focus', function () {
                 $('#externalToolbarWrapper').find("div.mce-panel").show();
                 });
                 theEditor.on('blur', function () {
                 $('#externalToolbarWrapper').find("div.mce-panel").show();
                 });
                 theEditor.on("init", function() {
                 $('#externalToolbarWrapper').find("div.mce-panel").show();
                 });
                 //*/
            },

            toolbar: [
                "code | undo redo | spellchecker | styleselect | " +
                    "bold italic underline strikethrough subscript superscript removeformat | " +
                    "alignleft aligncenter alignright alignjustify | " +
                    "bullist numlist outdent indent | cut copy paste pastetext | " +
                    "image table hr charmap template | link unlink anchor"
            ]
        });
        //*/

        testDefaultOutput = function (elm) {

            document.getElementById('defaultOutput').innerText = elm.innerHTML;
        };
    </script>
    <div>
        <div id="externalToolbarWrapper" class="mce-tinymce-inline">TOOLBAR</div>
        <br/>

        <div>Model Value: "<span id="defaultOutput"></span>"</div>
        <br/>

        <form method="post">
            <label for="textarea1">GENERAL USAGE</label>
            <br/>

            <div class="editor">CLASS</div>
            <br/>

            <div data-richEdit="something" onblur="testDefaultOutput(this)">richEdit</div>
            <br/>

            <div data-richEdit="somethingElse" onblur="testDefaultOutput(this)">richEdit2</div>
            <br/>

            <div data-textEdit="somethingText" onblur="testDefaultOutput(this)">textEdit</div>
            <br/>
            <label data-richEdit="something" onblur="testDefaultOutput(this)">richEdit label</label>
            <br/>
            <button disabled="disabled" onclick="return false;">
                <div data-richEdit="something">richEdit button</div>
            </button>
        </form>
    </div>

<?php

} else {

    /* From RcmAngularJs Module */
    $this->rcmIncludeAngularJsUiTinyMce();

    ?>

    TEST RcmTinyMce
    <script type="text/javascript">
        // angular
        angular.module('Rcm', ['ui.tinymce'])
            .factory(
                'rcmConfig',
                function () {
                    self = this;

                    self.baseUrl = "<?php echo $baseUrl; ?>";

                    return self;
                }
            )
            .factory(
                'htmlEditorDefaultOptions',
                [
                    'rcmConfig',
                    function (rcmConfig) {
                        var tinymceOptions = {
                            force_br_newlines: false,
                            force_p_newlines: false,
                            forced_root_block: '',

                            inline: true,
                            fixed_toolbar_container: '#externalToolbarWrapper',

                            menubar: false,
                            plugins: "anchor, charmap, code, hr, image, link, paste, spellchecker, template, table",
                            relative_urls: true,
                            document_base_url: rcmConfig.baseUrl,
                            statusbar: false,
                            //selector: "[data-richEdit]", //"div.editor",

                            setup: function (theEditor) {
                                /* hide/show toolbar on focus div.mce-toolbar-grp *
                                 theEditor.on('focus', function () {
                                 $('#externalToolbarWrapper').find("div.mce-panel").show();
                                 });
                                 theEditor.on('blur', function () {
                                 $('#externalToolbarWrapper').find("div.mce-panel").show();
                                 });
                                 theEditor.on("init", function() {
                                 $('#externalToolbarWrapper').find("div.mce-panel").show();
                                 });
                                 //*/
                            },

                            toolbar: [
                                "code | undo redo | spellchecker | styleselect | " +
                                    "bold italic underline strikethrough subscript superscript removeformat | " +
                                    "alignleft aligncenter alignright alignjustify | " +
                                    "bullist numlist outdent indent | cut copy paste pastetext | " +
                                    "image table hr charmap template | link unlink anchor"
                            ]
                        };

                        return tinymceOptions;
                    }
                ]
            )
            .factory(
                'htmlEditorTextOptions',
                [
                    'rcmConfig',
                    function (rcmConfig) {
                        var tinymceOptions = {
                            force_br_newlines: false,
                            force_p_newlines: false,
                            forced_root_block: '',

                            inline: true,
                            fixed_toolbar_container: '#externalToolbarWrapper',

                            menubar: false,
                            plugins: "anchor, charmap, code, image, link, paste, spellchecker, template",
                            relative_urls: true,
                            document_base_url: rcmConfig.baseUrl,
                            statusbar: false,
                            //selector: "[data-textEdit]", //"div.editor",

                            //setup: function (theEditor) {
                            //},

                            toolbar: [
                                "code | undo redo | spellchecker | " +
                                    "bold italic underline strikethrough subscript superscript removeformat | " +
                                    "outdent indent | cut copy paste pastetext | " +
                                    "image charmap template | link unlink anchor"
                            ]
                        };

                        return tinymceOptions;
                    }
                ]
            )
            //@TODO GENERATE UNIQUE ID
            .factory('htmlEditorGeneratedId',0)
            .factory(
                'htmlEditorGenerateId',
                [
                    'htmlEditorGeneratedId',
                    function(htmlEditorGeneratedId) {

                        if(typeof id !== 'number'){
                            var id = 0
                            return id;
                        }

                        return id++;
                    }
                ]
            )
            .factory(
                'rcmHtmlEdit',
                [
                    'htmlEditorGenerateId',
                    function (htmlEditorGenerateId) {

                        return function (htmlEditorOptions, generatedId) {

                            return {
                                priority: 10,
                                require: 'ngModel',
                                link: function (scope, elm, attrs, ngModel) {
                                    var expression, options, tinyInstance,
                                        updateView = function () {
                                            ngModel.$setViewValue(elm[0].innerHTML);
                                            if (!scope.$root.$$phase) {
                                                scope.$apply();
                                            }
                                        };

                                   // console.log(elm[0]);
                                    console.log(attrs);

                                    // generate an ID if not present
                                    if (!attrs.id) {
                                        attrs.$set('id', 'htmlEditor' + htmlEditorGenerateId);
                                    }

                                    if (attrs.htlmEditorOptions) {
                                        expression = scope.$eval(attrs.htlmEditorOptions);
                                    } else {
                                        expression = {};
                                    }

                                    // make config'ed setup method available
                                    if (expression.setup) {
                                        var configSetup = expression.setup;
                                        delete expression.setup;
                                    }

                                    options = {
                                        // Update model when calling setContent (such as from the source editor popup)
                                        setup: function (ed) {
                                            var args;
                                            ed.on('init', function(args) {
                                                ngModel.$render();
                                                ngModel.$setPristine();
                                            });
                                            // Update model on button click
                                            ed.on('ExecCommand', function (e) {
                                                ed.save();
                                                updateView();
                                            });
                                            // Update model on keypress
                                            ed.on('KeyUp', function (e) {
                                                ed.save();
                                                updateView();
                                            });
                                            // Update model on change, i.e. copy/pasted text, plugins altering content
                                            ed.on('SetContent', function (e) {
                                                if (!e.initial && ngModel.$viewValue !== e.content) {
                                                    ed.save();
                                                    updateView();
                                                }
                                            });
                                            ed.on('blur', function(e) {
                                                elm[0].blur();
                                            });
                                            // Update model when an object has been resized (table, image)
                                            ed.on('ObjectResized', function (e) {
                                                ed.save();
                                                updateView();
                                            });
                                            if (configSetup) {
                                                configSetup(ed);
                                            }
                                        },
                                        mode: 'exact',
                                        elements: attrs.id
                                    };
                                    // extend options with initial htmlEditorOptions and options from directive attribute value
                                    angular.extend(options, htmlEditorOptions, expression);

                                    setTimeout(function () {
                                        tinymce.init(options);
                                    });

                                    ngModel.$render = function() {
                                        if (!tinyInstance) {
                                            tinyInstance = tinymce.get(attrs.id);
                                        }
                                        if (tinyInstance) {
                                            tinyInstance.setContent(ngModel.$viewValue || '');
                                        }
                                    };

                                    scope.$on('$destroy', function() {
                                        if (!tinyInstance) { tinyInstance = tinymce.get(attrs.id); }
                                        if (tinyInstance) {
                                            tinyInstance.remove();
                                            tinyInstance = null;
                                        }
                                    });
                                }
                            }
                        }
                    }
                ]
            )
            .directive(
                'richedit',
                [
                    'rcmHtmlEdit',
                    'htmlEditorDefaultOptions',
                    function (rcmHtmlEdit, htmlEditorDefaultOptions) {

                        if(typeof generatedId !== 'number'){
                            var generatedId = 0;
                        }

                        generatedId++

                        return rcmHtmlEdit(htmlEditorDefaultOptions, generatedId);
                    }
                ]
            )
            .directive(
                'textedit',
                [
                    'rcmHtmlEdit',
                    'htmlEditorTextOptions',
                    function (rcmHtmlEdit, htmlEditorTextOptions) {

                        if(typeof generatedId !== 'number'){
                            var generatedId = 0;
                        }

                        generatedId++

                        return rcmHtmlEdit(htmlEditorTextOptions, generatedId);
                    }
                ]
            )
            .controller(
                'rcmController',
                [
                    '$scope',
                    'htmlEditorDefaultOptions',
                    function ($scope, htmlEditorDefaultOptions) {

                        $scope.tinymceOptions = htmlEditorDefaultOptions;

                        $scope.myModel = "My Text"
                    }
                ]
            );
    </script>
    <div ng-app="Rcm">
        <div>TOOLBAR</div>
        <div id="externalToolbarWrapper"></div>

        <form method="post" ng-controller="rcmController">
            <div>Model Value: "{{myModel}}"</div>
            <br/>

            <div rich-edit="" class="editor">CLASS</div>
            <br/>

            <div data-richEdit="something" ng-model="myModel">richEdit</div>
            <br/>

            <div XXXui-tinymce ng-model="myModel">richEdit2
            </div>
            <br/>

            <div data-textEdit="somethingText" ng-model="myModel">textEdit</div>
            <br/>
            <label data-richEdit="something" ng-model="myModel">richEdit label</label>
            <br/>
            <button disabled="disabled" onclick="return false;">
                <div data-richEdit="something" ng-model="myModel">richEdit button</div>
            </button>
        </form>
    </div>

<?php
}
?>



